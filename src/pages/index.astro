---
import MainLayout from '../layouts/MainLayout.astro';
import { getCollection } from 'astro:content';

// Fetch testimonials, sorted by order
const testimonials = (await getCollection('testimonials')).sort(
  (a, b) => (a.data.order ?? 99) - (b.data.order ?? 99)
);
---

<MainLayout title="Anjaneya Innovations - Professional Consulting Services">
  <section class="hero">
    <div class="hero-content">
      <div class="stealth-subtitle">We're building something special</div>
      <h1>Engineering the Future of Business.</h1>
      <p>Anjaneya Innovations partners with ambitious organizations to navigate complex challenges and achieve breakthrough results. Operating in stealth, we leverage deep technical expertise, AI-driven insights, and strategic business acumen to deliver bespoke, high-impact solutions with agility and integrity.</p>
      <div class="cta-buttons">
        <a href="/services" class="btn btn-primary">Our Services</a>
        <a href="/contact" class="btn btn-secondary">Contact Us</a>
      </div>
    </div>
  </section>

  <section class="services animate-on-scroll">
    <div class="container">
      <h2 class="section-title">Our Services</h2>
      <div class="services-grid">
        <div class="service-card">
          <h3>Business Consulting</h3>
          <p>Strategic guidance to optimize your business operations and increase profitability.</p>
        </div>
        
        <div class="service-card">
          <h3>Technology Solutions</h3>
          <p>Cutting-edge technology implementation to streamline your business processes.</p>
        </div>
        
        <div class="service-card">
          <h3>Data Analytics</h3>
          <p>Comprehensive data analysis to drive informed business decisions.</p>
        </div>
      </div>
      <div class="services-cta">
        <a href="/services" class="btn btn-outline">View All Services</a>
      </div>
    </div>
  </section>

  <section class="about-preview animate-on-scroll">
    <div class="container">
      <div class="about-grid">
        <div class="about-content">
          <h2 class="section-title">Our Story</h2>
          <p>Anjaneya Innovations is a forward-thinking consulting firm dedicated to helping businesses achieve their full potential through innovative solutions and strategic guidance.</p>
          <p>Our team of experts brings years of industry experience to deliver tailored services that address your unique business needs.</p>
          <a href="/about" class="btn btn-text">Learn More About Us <span class="arrow">â†’</span></a>
        </div>
        <!-- Remove about-image div -->
        <!-- 
        <div class="about-image">
          <div class="image-placeholder-graphic"></div>
        </div>
         -->
      </div>
    </div>
  </section>

  <!-- Replace the testimonials-journey section with a modern testimonial slider -->
  <section class="testimonials-showcase animate-on-scroll">
    <div class="container">
      <h2 class="section-title">Our Impact, In Their Words</h2>
      
      <div class="showcase-wrapper">
        <div class="showcase-slider">
          <div class="slides-container">
            {testimonials.map((testimonial, index) => (
              <div class="slide" key={`testimonial-${index}`} data-index={index}>
                <div class="slide-content">
                  <div class="quote-text">"{testimonial.data.quote}"</div>
                  <div class="slide-footer">
                    <div class="author">{testimonial.data.name}</div>
                    <div class="position">{testimonial.data.position}</div>
                  </div>
                </div>
              </div>
            ))}
          </div>
          
          <div class="slider-nav">
            <button class="nav-arrow prev" aria-label="Previous testimonial">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="15 18 9 12 15 6"></polyline></svg>
            </button>
            <div class="pagination">
              {testimonials.map((_, index) => (
                <button 
                  class={`pagination-dot ${index === 0 ? 'active' : ''}`} 
                  data-index={index} 
                  aria-label={`Go to testimonial ${index + 1}`}
                  key={`dot-${index}`}
                ></button>
              ))}
            </div>
            <button class="nav-arrow next" aria-label="Next testimonial">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="9 18 15 12 9 6"></polyline></svg>
            </button>
          </div>
        </div>
      </div>
    </div>
  </section>

  <section class="cta-section animate-on-scroll">
    <div class="container">
      <h2>Ready to Transform Your Business?</h2>
      <p>Contact us today to discuss how Anjaneya Innovations can help you achieve your business goals.</p>
      <a href="/contact" class="btn btn-primary">Get Started</a>
    </div>
  </section>
</MainLayout>

<style>
  /* Main page container */
  .page-wrapper {
    width: 100%;
    overflow-x: hidden;
    position: relative;
  }
  
  /* Hero Section */
  .hero {
    position: relative;
    min-height: 600px; 
    display: flex; 
    align-items: center;
    justify-content: center;
    padding: 0 var(--space-xl); 
    margin-bottom: var(--space-2xl); 
    overflow: hidden; /* Prevent any child elements from causing overflow */
  }

  /* Stealth Subtitle - Dark Mode Adjust */
  .stealth-subtitle {
    font-size: 1.1rem; 
    font-weight: 600;
    margin-bottom: var(--space-md);
    color: var(--secondary-color); 
    text-transform: uppercase;
    letter-spacing: 1.5px; 
    opacity: 0.9;
    position: relative;
    display: inline-block;
  }

  .stealth-subtitle::before, 
  .stealth-subtitle::after {
    content: '';
    position: absolute;
    height: 1px;
    background-color: var(--accent-color);
    opacity: 0.6;
    top: 50%;
    width: 25px; /* Adjusted width */
  }

  .stealth-subtitle::before {
    right: 100%;
    margin-right: 10px; /* Adjusted margin */
  }

  .stealth-subtitle::after {
    left: 100%;
    margin-left: 10px; /* Adjusted margin */
  }

  /* Define Gradient Shift Animation */
  @keyframes gradientShift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }

  .hero-content {
    max-width: 750px; 
    margin: 0 auto;
    text-align: center;
    position: relative;
    z-index: 2;
    padding-top: 0; /* Reset padding */
  }

  .hero h1 {
    font-size: clamp(3rem, 6vw, 4.5rem); 
    margin-bottom: var(--space-md);
    font-family: var(--font-sans);
    font-weight: 800;
    color: var(--primary-color); /* Light Text */
    line-height: 1.1;
  }

  .hero p {
    font-size: 1.2rem; 
    max-width: 650px; 
    margin: 0 auto var(--space-xl); 
    opacity: 1; 
    color: var(--secondary-color); /* Medium gray text */
  }

  .cta-buttons {
    display: flex;
    gap: var(--space-md); 
    justify-content: center;
  }

  /* Define button styles locally */ 
  .btn {
    display: inline-block;
    padding: 0.9rem 2.2rem; 
    border-radius: var(--radius-default); 
    text-decoration: none;
    font-family: var(--font-sans);
    font-weight: 700; /* Revert weight if needed */
    font-size: 0.9rem;
    transition: all 0.2s ease-in-out;
    border: 1px solid transparent;
    cursor: pointer;
    text-align: center;
    letter-spacing: 0.5px;
    text-transform: uppercase; 
  }

  .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 3px 6px rgba(0,0,0,0.1); 
  }

  .btn-primary {
    /* Default: Dark bg, light text, accent border */
    background-color: var(--card-bg-color);
    color: var(--primary-color);
    border-color: var(--accent-color);
  }

  .btn-primary:hover {
    /* Hover: Cyan bg, dark text */
    background-color: var(--accent-color); 
    border-color: var(--accent-color);
    color: var(--text-on-light);
  }

  .btn-secondary,
  .btn-outline {
    background-color: transparent;
    border-color: var(--primary-color); /* Light border */
    color: var(--primary-color); /* Light text */
  }

  .btn-secondary:hover,
  .btn-outline:hover {
    /* Ensure Corrected Hover: Transparent BG, Accent border/text */
    background-color: transparent;
    color: var(--accent-color);
    border-color: var(--accent-color);
  }

  .btn-text {
    color: var(--primary-color);
    font-weight: 600;
    display: inline-flex;
    align-items: center;
    gap: 0.4rem; 
    background: none;
    padding: 0;
    border: none;
    text-transform: none; 
    letter-spacing: normal;
    font-family: var(--font-sans); 
    text-decoration: underline;
    text-decoration-color: transparent; /* Hide underline by default */
    transition: color 0.2s ease, text-decoration-color 0.2s ease;
  }

  .btn-text .arrow {
    transition: transform 0.2s ease;
    font-size: 1.1em; 
  }

  .btn-text:hover {
    color: var(--accent-color);
    text-decoration-color: var(--accent-color); /* Show underline on hover */
    box-shadow: none; 
    transform: none; 
  }

  .btn-text:hover .arrow {
    transform: translateX(3px);
  }

  /* Restore hero specific button styles */
  .hero .btn-secondary {
    border-color: var(--primary-color); /* Light border */
    color: var(--primary-color); /* Light text */
  }
  
  .hero .btn-secondary:hover {
      /* Hover: Cyan background, dark text */
      background-color: var(--accent-color); 
      color: var(--text-on-light);
      border-color: var(--accent-color);
  }

  /* Section Styles - Adjust padding and title */
  .section-title {
    font-size: clamp(2.2rem, 5vw, 3rem); 
    padding-bottom: var(--space-sm); 
    margin-bottom: calc(var(--space-2xl) - var(--space-sm) - 2px); 
    /* --- Center Alignment --- */
    text-align: center; 
    color: var(--primary-color); 
    font-weight: 800;
    border-bottom: 2px solid var(--accent-color);
    /* --- Make underline only as wide as text --- */
    display: inline-block; 
    width: auto;
    margin-left: auto;
    margin-right: auto;
  }

  .container {
    max-width: var(--max-width);
    margin: 0 auto;
    padding: var(--space-3xl) var(--space-xl); 
    /* Center section titles */
    text-align: center;
  }
  
  /* Alternating Section Backgrounds - REMOVE */
  /* 
  section:nth-of-type(even) {
     background-color: var(--background-color); 
  }
  section:nth-of-type(odd) {
     background-color: var(--card-bg-color); 
  }
  section.hero, section.cta-section {
      background-color: var(--background-color); 
  }
  */


  /* Services Section - Dark Mode */
  .services-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); 
    gap: var(--space-xl); 
    margin-bottom: var(--space-2xl); 
  }

  .service-card {
    background: var(--card-bg-color); /* Use gradient */
    padding: var(--space-xl); 
    border-radius: var(--radius-default);
    /* Subtle border */
    border: 1px solid var(--border-color); 
    transition: transform 0.3s ease, border-color 0.3s ease;
    display: flex;
    flex-direction: column;
    box-shadow: none; /* Remove light theme shadow */
  }

  .service-card:hover {
    transform: translateY(-5px);
    border-color: var(--accent-color); /* Highlight border on hover */
  }

  .service-card h3 {
    font-size: 1.4rem; 
    margin-bottom: var(--space-sm); 
    color: var(--primary-color); /* Light text */
    font-weight: 800; 
    margin-top: var(--space-sm);
  }
  
  .service-card p {
      font-size: 0.95rem;
      color: var(--secondary-color); /* Medium gray text */
      flex-grow: 1; 
      margin-bottom: var(--space-lg); 
  }

  .services-cta {
    text-align: center;
    margin-top: var(--space-lg); 
  }

  /* About Preview Section */
  .about-preview {
    /* background-color: var(--light-bg); /* Use light-bg from layout */ */
    /* Background handled by nth-of-type */
  }
  
  .about-grid {
    display: grid;
    /* Change to single column */
    grid-template-columns: 1fr; 
    gap: 0; /* Remove gap */
    align-items: center;
  }

  .about-content p {
    margin-bottom: var(--space-md); 
    color: var(--secondary-color); /* Use secondary */
    font-size: 1rem;
  }
  
  /* Remove specific override - ensure commented out */
  /* 
  .about-content .section-title {
     text-align: left; 
     padding-bottom: var(--space-sm);
     margin-bottom: calc(var(--space-lg) - var(--space-sm) - 2px);
     border-bottom: 2px solid var(--accent-color);
     display: block; 
     width: fit-content; 
     margin-left: 0; 
  }
  */

  /* Remove about-image and placeholder styles */
  /*
  .about-image { ... }
  .image-placeholder-graphic { ... }
  .image-placeholder-graphic::after { ... }
  */

  /* Testimonials Section - Dark Mode */
  .testimonials {
    /* background-color: var(--primary-color); Use primary color bg */ 
    /* color: var(--white); Text should be white */
    /* Background handled by nth-of-type */
  }
  
  .testimonials .container {
      max-width: 850px; 
      padding: var(--space-3xl) var(--space-xl); 
  }

  /* New Testimonial Slider Styles */
  .testimonials-showcase {
    position: relative;
    padding: var(--space-3xl) 0;
    overflow: hidden;
    background-color: var(--background-color);
  }

  .showcase-wrapper {
    position: relative;
    width: 100%;
    margin: 0 auto;
    padding-top: var(--space-xl);
    padding-bottom: var(--space-3xl);
  }

  .showcase-slider {
    position: relative;
    perspective: 1200px;
    overflow: visible;
  }

  .slides-container {
    position: relative;
    height: auto;
    min-height: 450px; /* Changed from fixed height to min-height */
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 0 auto;
    transform-style: preserve-3d;
  }

  .slide {
    position: absolute;
    width: 65%;
    max-width: 1000px;
    height: auto;
    min-height: 350px; /* Added min-height to ensure consistent size */
    top: 0;
    opacity: 0;
    pointer-events: none;
    transform: translateX(100px) translateZ(-400px) rotateY(25deg);
    transition: transform 0.8s cubic-bezier(0.16, 1, 0.3, 1), opacity 0.8s ease;
    will-change: transform, opacity;
  }

  .slide.active {
    opacity: 1;
    pointer-events: auto;
    z-index: 10;
    transform: translateX(0) translateZ(0) rotateY(0);
  }

  .slide.prev {
    opacity: 0.5;
    pointer-events: none;
    z-index: 5;
    transform: translateX(-85%) translateZ(-150px) rotateY(-15deg);
  }

  .slide.next {
    opacity: 0.5;
    pointer-events: none;
    z-index: 5;
    transform: translateX(85%) translateZ(-150px) rotateY(15deg);
  }

  .slide-content {
    position: relative;
    padding: var(--space-2xl);
    background: var(--card-bg-color);
    border-radius: 16px;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    height: 100%;
    min-height: 350px; /* Added min-height for consistent card size */
    display: flex;
    flex-direction: column;
    overflow: hidden;
    border: 1px solid rgba(255, 255, 255, 0.05);
  }

  .slide-content::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      to bottom right,
      rgba(var(--accent-rgb, 14, 165, 233), 0.05) 0%,
      rgba(var(--accent-rgb, 14, 165, 233), 0) 70%
    );
    z-index: -1;
  }

  .quote-text {
    font-size: clamp(1.2rem, 2vw, 1.5rem);
    line-height: 1.6;
    color: var(--primary-color);
    margin-bottom: var(--space-xl);
    font-weight: 300;
    position: relative;
    flex-grow: 1;
  }

  .quote-text::before {
    content: '"';
    position: absolute;
    top: -30px;
    left: -10px;
    font-size: 6rem;
    font-family: Georgia, serif;
    color: var(--accent-color);
    opacity: 0.2;
    line-height: 1;
  }

  .slide-footer {
    margin-top: auto;
    display: flex;
    flex-direction: column;
    gap: 4px;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    padding-top: var(--space-md);
  }

  .author {
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--primary-color);
  }

  .position {
    font-size: 0.9rem;
    color: var(--accent-color);
    opacity: 0.9;
  }

  /* Slider Nav Controls */
  .slider-nav {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-lg);
    margin-top: var(--space-xl);
    position: relative;
    z-index: 20;
  }

  /* Control buttons styles that match site design language */
  .nav-arrow {
    background: var(--card-bg-solid);
    border: 1px solid var(--border-color);
    color: var(--primary-color);
    cursor: pointer;
    width: 42px;
    height: 42px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    overflow: hidden;
    position: relative;
  }

  /* Create overlay for cyan highlight effect */
  .nav-arrow::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--accent-color);
    opacity: 0;
    transition: opacity 0.2s ease;
    z-index: 1;
  }

  .nav-arrow:hover::after {
    opacity: 1;
  }

  .nav-arrow svg {
    width: 18px;
    height: 18px;
    stroke-width: 2.5px;
    transition: all 0.2s ease;
    stroke: var(--primary-color);
    fill: none;
    position: relative;
    z-index: 2;
  }

  .nav-arrow:hover {
    border-color: var(--accent-color);
    transform: translateY(-2px);
  }

  .nav-arrow:hover svg {
    stroke: var(--text-on-light);
  }

  .nav-arrow:active {
    transform: translateY(0);
  }

  .nav-arrow.prev:hover svg {
    transform: translateX(-2px);
  }

  .nav-arrow.next:hover svg {
    transform: translateX(2px);
  }

  .pagination {
    display: flex;
    gap: 10px;
  }

  .pagination-dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: var(--border-color);
    border: none;
    padding: 0;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .pagination-dot::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--accent-color);
    border-radius: 50%;
    transform: scale(0);
    transition: transform 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  }

  .pagination-dot:hover::after {
    transform: scale(0.7);
  }

  .pagination-dot.active::after {
    transform: scale(1);
  }

  .pagination-dot:hover {
    transform: translateY(-1px);
  }

  .pagination-dot.active {
    transform: scale(1.2);
  }

  /* Responsive adjustments */
  @media (max-width: 1024px) {
    .slides-container {
      min-height: 420px; /* Changed from height to min-height */
    }
    
    .slide {
      width: 85%;
      min-height: 380px; /* Added min-height */
    }
    
    .slide-content {
      min-height: 380px; /* Added min-height */
    }
  }

  @media (max-width: 768px) {
    .slides-container {
      min-height: 450px; /* Changed from height to min-height */
    }
    
    .slide {
      width: 90%;
      min-height: 420px; /* Added min-height */
    }
    
    .slide-content {
      min-height: 420px; /* Added min-height */
    }
    
    .slide.prev, .slide.next {
      opacity: 0.3;
      transform: translateX(0) translateZ(-200px);
    }
  }

  @media (max-width: 480px) {
    .slides-container {
      min-height: 500px; /* Changed from height to min-height and increased value */
    }
    
    .slide {
      min-height: 470px; /* Added min-height */
    }
    
    .slide-content {
      min-height: 470px; /* Added min-height */
      padding: var(--space-xl); /* Reduced padding for mobile */
    }
    
    .quote-text {
      font-size: 1rem;
    }
  }

  .testimonial-scene {
    min-height: 100vh; /* Each scene takes at least full viewport height */
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column; /* Center content wrapper */
    position: relative; /* For absolute positioning of internal elements or pseudo-elements */
    padding: var(--space-2xl) var(--space-xl);
    /* opacity: 0; */ /* Will be controlled by ScrollTrigger */
    /* border-bottom: 1px solid var(--border-color); */ /* Optional separator */
  }
</style>

<script>
  // Remove hero-logo animation as the element doesn't exist
  document.addEventListener('DOMContentLoaded', () => {
    if (typeof gsap !== 'undefined') {
      // No hero-logo animation
    }
  });
</script>

<!-- Hero Section Animations -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    if (typeof gsap !== 'undefined') {
      // Select elements individually instead of as NodeLists
      const subtitle = document.querySelector('.stealth-subtitle');
      const heading = document.querySelector('.hero h1');
      const paragraph = document.querySelector('.hero-content p');
      const buttons = document.querySelectorAll('.cta-buttons .btn');
      
      // Set initial state for each element individually
      if (subtitle) gsap.set(subtitle, { opacity: 0, y: 30 });
      if (heading) gsap.set(heading, { opacity: 0, y: 30 });
      if (paragraph) gsap.set(paragraph, { opacity: 0, y: 30 });
      if (buttons.length) {
        buttons.forEach(btn => {
          gsap.set(btn, { opacity: 0, y: 30 });
        });
      }
      
      const heroTl = gsap.timeline({ delay: 0.3 });
      
      if (subtitle) {
        heroTl.to(subtitle, {
          opacity: 1,
          y: 0,
          duration: 0.8,
          ease: 'power3.out'
        });
      }
      
      if (heading) {
        heroTl.to(heading, {
          opacity: 1,
          y: 0,
          duration: 0.8,
          ease: 'power3.out'
        }, "-=0.4");
      }
      
      if (paragraph) {
        heroTl.to(paragraph, {
          opacity: 1,
          y: 0, 
          duration: 0.8,
          ease: 'power2.out'
        }, "-=0.4");
      }
      
      if (buttons.length) {
        buttons.forEach((btn, i) => {
          heroTl.to(btn, {
            opacity: 1,
            y: 0,
            duration: 0.6,
            ease: 'back.out(1.2)'
          }, `-=${0.4 - (i * 0.1)}`);
        });
      }
    }
  });
</script>

<!-- Service Cards Scroll Animations -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    if (typeof gsap !== 'undefined' && typeof ScrollTrigger !== 'undefined') {
      const serviceCards = document.querySelectorAll('.service-card');
      
      if (serviceCards.length) {
        // Set initial state for each card individually 
        serviceCards.forEach(card => {
          gsap.set(card, { opacity: 0, y: 50 });
        });
        
        // Animate each card individually
        serviceCards.forEach((card, i) => {
          gsap.to(card, {
            scrollTrigger: {
              trigger: card,
              start: "top 80%", 
              toggleActions: "play none none none", 
            },
            opacity: 1,
            y: 0,
            duration: 0.8,
            delay: i * 0.15, 
            ease: 'power2.out',
            clearProps: 'all' 
          });
        });
      }
      
      const ctaButton = document.querySelector('.services-cta .btn');
      if (ctaButton) {
        gsap.from(ctaButton, {
          scrollTrigger: {
            trigger: '.services-cta',
            start: "top 85%"
          },
          opacity: 0,
          y: 20,
          duration: 0.6,
          ease: 'back.out(1.7)',
          delay: 0.2 
        });
      }
    }
  });
</script>

<!-- Add GSAP animation for testimonial slider -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    if (typeof gsap !== 'undefined') {
      // Initialize the slider
      const slides = document.querySelectorAll('.slide');
      const dots = document.querySelectorAll('.pagination-dot');
      const prevBtn = document.querySelector('.nav-arrow.prev');
      const nextBtn = document.querySelector('.nav-arrow.next');
      let currentIndex = 0;
      let isAnimating = false;
      
      // Function to set the slider container height based on the current active slide
      function updateSliderHeight() {
        const activeSlide = document.querySelector('.slide.active');
        const slidesContainer = document.querySelector('.slides-container');
        
        if (activeSlide && slidesContainer) {
          const slideHeight = activeSlide.offsetHeight;
          // Set the container height to match the active slide, plus some buffer
          slidesContainer.style.height = `${slideHeight + 20}px`;
        }
      }
      
      // Initialize the 3D slider
      function initSlider() {
        // Set initial positions
        gsap.set(slides, { 
          opacity: 0,
          visibility: 'hidden',
          x: 100,
          z: -400,
          rotationY: 25
        });
        
        // Active slide
        gsap.set(slides[0], { 
          opacity: 1,
          visibility: 'visible',
          x: 0,
          z: 0,
          rotationY: 0
        });
        slides[0].classList.add('active');
        
        // Previous slide (if exists)
        if (slides.length > 1) {
          const prevIndex = (slides.length - 1);
          gsap.set(slides[prevIndex], { 
            opacity: 0.5,
            visibility: 'visible',
            x: '-85%',
            z: -150,
            rotationY: -15
          });
          slides[prevIndex].classList.add('prev');
        }
        
        // Next slide (if exists)
        if (slides.length > 2) {
          gsap.set(slides[1], { 
            opacity: 0.5,
            visibility: 'visible',
            x: '85%',
            z: -150,
            rotationY: 15
          });
          slides[1].classList.add('next');
        }
        
        // Update height to match content
        updateSliderHeight();
      }
      
      // Change slide function
      function goToSlide(newIndex) {
        if (isAnimating || newIndex === currentIndex) return;
        isAnimating = true;
        
        // Improved direction detection that accounts for wrap-around cases
        let direction;
        if (newIndex === 0 && currentIndex === slides.length - 1) {
          // Special case: going from last to first (should be "next")
          direction = 'next';
        } else if (newIndex === slides.length - 1 && currentIndex === 0) {
          // Special case: going from first to last (should be "prev")
          direction = 'prev';
        } else {
          // Normal case: compare indices
          direction = newIndex > currentIndex ? 'next' : 'prev';
        }
        
        // Determine slide indices - handle wrap around
        const oldIndex = currentIndex;
        const oldPrevIndex = (oldIndex - 1 + slides.length) % slides.length;
        const oldNextIndex = (oldIndex + 1) % slides.length;
        
        // New indices after the transition
        const newPrevIndex = (newIndex - 1 + slides.length) % slides.length;
        const newNextIndex = (newIndex + 1) % slides.length;
        
        // Clear any existing classes
        slides.forEach(slide => {
          slide.classList.remove('active', 'prev', 'next');
        });
        
        // Update pagination dots
        dots.forEach((dot, i) => {
          dot.classList.toggle('active', i === newIndex);
        });
        
        // Create animation timeline
        const tl = gsap.timeline({
          onComplete: () => {
            // Update current index
            currentIndex = newIndex;
            
            // Update classes
            slides[newIndex].classList.add('active');
            slides[newPrevIndex].classList.add('prev');
            slides[newNextIndex].classList.add('next');
            
            // Reset other slides
            slides.forEach((slide, i) => {
              if (i !== newIndex && i !== newPrevIndex && i !== newNextIndex) {
                gsap.set(slide, { 
                  visibility: 'hidden', 
                  opacity: 0,
                  x: 100,
                  z: -400,
                  rotationY: 25
                });
              }
            });
            
            // Update height to match content after slide change
            updateSliderHeight();
            
            isAnimating = false;
          }
        });
        
        if (direction === 'next') {
          // Current to previous
          tl.to(slides[oldIndex], {
            opacity: 0.5,
            x: '-85%',
            z: -150,
            rotationY: -15,
            duration: 0.7,
            ease: 'power2.inOut'
          }, 0);
          
          // Next to current
          tl.to(slides[oldNextIndex], {
            opacity: 1,
            x: 0,
            z: 0,
            rotationY: 0,
            duration: 0.7,
            ease: 'power2.inOut'
          }, 0);
          
          // Setup new next
          tl.set(slides[newNextIndex], {
            visibility: 'visible',
            opacity: 0,
            x: '130%',
            z: -200,
            rotationY: 25
          }, 0);
          
          // Animate new next
          tl.to(slides[newNextIndex], {
            opacity: 0.5,
            x: '85%',
            z: -150,
            rotationY: 15,
            duration: 0.7,
            ease: 'power2.inOut'
          }, 0.1);
        } else if (direction === 'prev') {
          // Fix: Added missing 'else if' condition that was causing bugs
          // Current to next
          tl.to(slides[oldIndex], {
            opacity: 0.5,
            x: '85%',
            z: -150,
            rotationY: 15,
            duration: 0.7,
            ease: 'power2.inOut'
          }, 0);
          
          // Prev to current
          tl.to(slides[oldPrevIndex], {
            opacity: 1,
            x: 0,
            z: 0,
            rotationY: 0,
            duration: 0.7,
            ease: 'power2.inOut'
          }, 0);
          
          // Setup new prev
          tl.set(slides[newPrevIndex], {
            visibility: 'visible',
            opacity: 0,
            x: '-130%',
            z: -200,
            rotationY: -25
          }, 0);
          
          // Animate new prev
          tl.to(slides[newPrevIndex], {
            opacity: 0.5,
            x: '-85%',
            z: -150,
            rotationY: -15,
            duration: 0.7,
            ease: 'power2.inOut'
          }, 0.1);
        }
      }
      
      // Initialize the slider
      initSlider();
      
      // Event listeners for controls
      prevBtn.addEventListener('click', () => {
        const newIndex = (currentIndex - 1 + slides.length) % slides.length;
        goToSlide(newIndex);
      });
      
      nextBtn.addEventListener('click', () => {
        const newIndex = (currentIndex + 1) % slides.length;
        goToSlide(newIndex);
      });
      
      // Dot navigation with smart direction detection
      dots.forEach((dot, index) => {
        dot.addEventListener('click', () => {
          // Don't do anything if clicking the current dot
          if (index === currentIndex) return;
          
          // Calculate shortest path (clockwise or counterclockwise)
          // This determines whether we should go "next" or "prev" to provide
          // the most natural-looking transition
          const totalSlides = slides.length;
          const clockwiseDist = (index - currentIndex + totalSlides) % totalSlides;
          const counterClockwiseDist = (currentIndex - index + totalSlides) % totalSlides;
          
          // Choose the shortest distance
          if (clockwiseDist <= counterClockwiseDist) {
            // Clockwise is shorter or equal, use "next" transitions
            goToSlide(index);
          } else {
            // Counter-clockwise is shorter, use "prev" transitions
            goToSlide(index);
          }
        });
      });
      
      // Auto advance with next direction
      let autoplayTimer = setInterval(() => {
        // Always advance in the "next" direction
        const newIndex = (currentIndex + 1) % slides.length;
        goToSlide(newIndex);
      }, 7000);
      
      // Pause autoplay on hover/interaction
      const sliderElement = document.querySelector('.showcase-slider');
      
      if (sliderElement) {
        sliderElement.addEventListener('mouseenter', () => {
          clearInterval(autoplayTimer);
        });
        
        sliderElement.addEventListener('mouseleave', () => {
          clearInterval(autoplayTimer);
          autoplayTimer = setInterval(() => {
            const newIndex = (currentIndex + 1) % slides.length;
            goToSlide(newIndex);
          }, 7000);
        });
      }
      
      // Entry animation when in viewport
      if (typeof ScrollTrigger !== 'undefined') {
        gsap.from('.showcase-wrapper', {
          y: 70,
          opacity: 0,
          duration: 1,
          ease: 'power3.out',
          scrollTrigger: {
            trigger: '.testimonials-showcase',
            start: 'top 70%',
            toggleActions: 'play none none none'
          }
        });
        
        // Add subtle parallax effect to the slider
        gsap.to('.slides-container', {
          y: -30,
          ease: 'none',
          scrollTrigger: {
            trigger: '.testimonials-showcase',
            start: 'top bottom',
            end: 'bottom top',
            scrub: true
          }
        });
      }
      
      // Also update slider height on window resize
      window.addEventListener('resize', () => {
        updateSliderHeight();
      });
    }
  });
</script> 